# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from biocontainers_flask.server.models.base_model_ import Model
from biocontainers_flask.server import util


class FacetValue(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, value: str=None, count: int=None):  # noqa: E501
        """FacetValue - a model defined in Swagger

        :param value: The value of this FacetValue.  # noqa: E501
        :type value: str
        :param count: The count of this FacetValue.  # noqa: E501
        :type count: int
        """
        self.swagger_types = {
            'value': str,
            'count': int
        }

        self.attribute_map = {
            'value': 'value',
            'count': 'count'
        }
        self._value = value
        self._count = count

    @classmethod
    def from_dict(cls, dikt) -> 'FacetValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FacetValue of this FacetValue.  # noqa: E501
        :rtype: FacetValue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self) -> str:
        """Gets the value of this FacetValue.

        A value of an specific facet peorperty  # noqa: E501

        :return: The value of this FacetValue.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this FacetValue.

        A value of an specific facet peorperty  # noqa: E501

        :param value: The value of this FacetValue.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def count(self) -> int:
        """Gets the count of this FacetValue.

        Number of tools with the specific value  # noqa: E501

        :return: The count of this FacetValue.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count: int):
        """Sets the count of this FacetValue.

        Number of tools with the specific value  # noqa: E501

        :param count: The count of this FacetValue.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count
