# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List  # noqa: F401

from biocontainers_flask.server import util
from biocontainers_flask.server.models.base_model_ import Model
from biocontainers_flask.server.models.tool_class import ToolClass  # noqa: F401,E501
from biocontainers_flask.server.models.tool_version import ToolVersion  # noqa: F401,E501


class Tool(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, url: str=None, id: str=None, aliases: List[str]=None, organization: str=None,
                 name: str=None, toolclass: ToolClass=None, description: str=None, meta_version: str=None,
                 has_checker: bool=None, checker_url: str=None, versions: List[ToolVersion]=None,
                 license: str=None, similar_score: float = None, pulls : int = None, tool_tags: List[str] = None):  # noqa: E501
        """Tool - a model defined in Swagger

        :param url: The url of this Tool.  # noqa: E501
        :type url: str
        :param id: The id of this Tool.  # noqa: E501
        :type id: str
        :param aliases: The aliases of this Tool.  # noqa: E501
        :type aliases: List[str]
        :param organization: The organization of this Tool.  # noqa: E501
        :type organization: str
        :param name: The name of this Tool.  # noqa: E501
        :type name: str
        :param toolclass: The toolclass of this Tool.  # noqa: E501
        :type toolclass: ToolClass
        :param description: The description of this Tool.  # noqa: E501
        :type description: str
        :param meta_version: The meta_version of this Tool.  # noqa: E501
        :type meta_version: str
        :param has_checker: The has_checker of this Tool.  # noqa: E501
        :type has_checker: bool
        :param checker_url: The checker_url of this Tool.  # noqa: E501
        :type checker_url: str
        :param versions: The versions of this Tool.  # noqa: E501
        :type versions: List[ToolVersion]
        """
        self.swagger_types = {
            'url': str,
            'id': str,
            'aliases': List[str],
            'organization': str,
            'name': str,
            'toolclass': ToolClass,
            'description': str,
            'meta_version': str,
            'has_checker': bool,
            'checker_url': str,
            'versions': List[ToolVersion],
            'license' : str,
            'similar_score' : float,
            'pulls' : int,
            'tool_tags': List[str]
        }

        self.attribute_map = {
            'url': 'url',
            'id': 'id',
            'aliases': 'aliases',
            'organization': 'organization',
            'name': 'name',
            'toolclass': 'toolclass',
            'description': 'description',
            'meta_version': 'meta_version',
            'has_checker': 'has_checker',
            'checker_url': 'checker_url',
            'versions': 'versions',
            'license':'license',
            'similar_score': 'similar_score',
            'pulls': 'pulls',
            'tool_tags': 'tool_tags'
        }
        self._url = url
        self._id = id
        self._aliases = aliases
        self._organization = organization
        self._name = name
        self._toolclass = toolclass
        self._description = description
        self._meta_version = meta_version
        self._has_checker = has_checker
        self._checker_url = checker_url
        self._versions = versions
        self._license = license
        self._similar_score = similar_score
        self._pulls = pulls
        self._tool_tags = tool_tags

    @classmethod
    def from_dict(cls, dikt) -> 'Tool':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Tool of this Tool.  # noqa: E501
        :rtype: Tool
        """
        return util.deserialize_model(dikt, cls)

    @property
    def url(self) -> str:
        """Gets the url of this Tool.

        The URL for this tool in this registry.  # noqa: E501

        :return: The url of this Tool.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this Tool.

        The URL for this tool in this registry.  # noqa: E501

        :param url: The url of this Tool.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def id(self) -> str:
        """Gets the id of this Tool.

        A unique identifier of the tool, scoped to this registry.  # noqa: E501

        :return: The id of this Tool.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Tool.

        A unique identifier of the tool, scoped to this registry.  # noqa: E501

        :param id: The id of this Tool.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def aliases(self) -> List[str]:
        """Gets the aliases of this Tool.

        Support for this parameter is optional for tool registries that support aliases. A list of strings that can be used to identify this tool which could be  straight up URLs.  This can be used to expose alternative ids (such as GUIDs) for a tool for registries. Can be used to match tools across registries.  # noqa: E501

        :return: The aliases of this Tool.
        :rtype: List[str]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases: List[str]):
        """Sets the aliases of this Tool.

        Support for this parameter is optional for tool registries that support aliases. A list of strings that can be used to identify this tool which could be  straight up URLs.  This can be used to expose alternative ids (such as GUIDs) for a tool for registries. Can be used to match tools across registries.  # noqa: E501

        :param aliases: The aliases of this Tool.
        :type aliases: List[str]
        """

        self._aliases = aliases

    @property
    def organization(self) -> str:
        """Gets the organization of this Tool.

        The organization that published the image.  # noqa: E501

        :return: The organization of this Tool.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization: str):
        """Sets the organization of this Tool.

        The organization that published the image.  # noqa: E501

        :param organization: The organization of this Tool.
        :type organization: str
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    @property
    def name(self) -> str:
        """Gets the name of this Tool.

        The name of the tool.  # noqa: E501

        :return: The name of this Tool.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Tool.

        The name of the tool.  # noqa: E501

        :param name: The name of this Tool.
        :type name: str
        """

        self._name = name

    @property
    def toolclass(self) -> ToolClass:
        """Gets the toolclass of this Tool.


        :return: The toolclass of this Tool.
        :rtype: ToolClass
        """
        return self._toolclass

    @toolclass.setter
    def toolclass(self, toolclass: ToolClass):
        """Sets the toolclass of this Tool.


        :param toolclass: The toolclass of this Tool.
        :type toolclass: ToolClass
        """
        if toolclass is None:
            raise ValueError("Invalid value for `toolclass`, must not be `None`")  # noqa: E501

        self._toolclass = toolclass

    @property
    def description(self) -> str:
        """Gets the description of this Tool.

        The description of the tool.  # noqa: E501

        :return: The description of this Tool.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Tool.

        The description of the tool.  # noqa: E501

        :param description: The description of this Tool.
        :type description: str
        """

        self._description = description

    @property
    def meta_version(self) -> str:
        """Gets the meta_version of this Tool.

        The version of this tool in the registry. Iterates when fields like the description, author, etc. are updated.  # noqa: E501

        :return: The meta_version of this Tool.
        :rtype: str
        """
        return self._meta_version

    @meta_version.setter
    def meta_version(self, meta_version: str):
        """Sets the meta_version of this Tool.

        The version of this tool in the registry. Iterates when fields like the description, author, etc. are updated.  # noqa: E501

        :param meta_version: The meta_version of this Tool.
        :type meta_version: str
        """

        self._meta_version = meta_version

    @property
    def has_checker(self) -> bool:
        """Gets the has_checker of this Tool.

        Whether this tool has a checker tool associated with it.  # noqa: E501

        :return: The has_checker of this Tool.
        :rtype: bool
        """
        return self._has_checker

    @has_checker.setter
    def has_checker(self, has_checker: bool):
        """Sets the has_checker of this Tool.

        Whether this tool has a checker tool associated with it.  # noqa: E501

        :param has_checker: The has_checker of this Tool.
        :type has_checker: bool
        """

        self._has_checker = has_checker

    @property
    def checker_url(self) -> str:
        """Gets the checker_url of this Tool.

        Optional url to the checker tool that will exit successfully if this tool produced the expected result given test data.  # noqa: E501

        :return: The checker_url of this Tool.
        :rtype: str
        """
        return self._checker_url

    @checker_url.setter
    def checker_url(self, checker_url: str):
        """Sets the checker_url of this Tool.

        Optional url to the checker tool that will exit successfully if this tool produced the expected result given test data.  # noqa: E501

        :param checker_url: The checker_url of this Tool.
        :type checker_url: str
        """

        self._checker_url = checker_url

    @property
    def versions(self) -> List[ToolVersion]:
        """Gets the versions of this Tool.

        A list of versions for this tool.  # noqa: E501

        :return: The versions of this Tool.
        :rtype: List[ToolVersion]
        """
        return self._versions

    @versions.setter
    def versions(self, versions: List[ToolVersion]):
        """Sets the versions of this Tool.

        A list of versions for this tool.  # noqa: E501

        :param versions: The versions of this Tool.
        :type versions: List[ToolVersion]
        """
        if versions is None:
            raise ValueError("Invalid value for `versions`, must not be `None`")  # noqa: E501

        self._versions = versions

    @property
    def license(self) -> str:
        """Gets the versions of this Tool.

        A list of versions for this tool  # noqa: E501

        :return: The versions of this Tool.
        :rtype: List[ToolVersion]
        """
        return self._license

    @license.setter
    def license(self, license: str):
        self._license = license

    @property
    def similar_score(self) -> float:
        return self._similar_score

    @similar_score.setter
    def similar_score(self, similar_score: float):
        self._similar_score = similar_score

    @property
    def pulls(self) -> int:
        return self._pulls

    @pulls.setter
    def pulls(self, pulls: int):
        self._pulls = pulls

    @property
    def tool_tags(self) -> List[str]:
        return self._tool_tags

    @tool_tags.setter
    def tool_tags(self, tool_tags: List[str]):
        self._tool_tags = tool_tags