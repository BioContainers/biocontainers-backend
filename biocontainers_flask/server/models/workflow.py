# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from biocontainers_flask.server import util
from biocontainers_flask.server.models.base_model_ import Model


class Workflow(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, type: str=None, description: str=None, git_repo: str=None, license: str=None, author: str=None, containers: List[str]=None):  # noqa: E501
        """Workflow - a model defined in Swagger

        :param name: The name of this Workflow.  # noqa: E501
        :type name: str
        :param type: The type of this Workflow.  # noqa: E501
        :type type: str
        :param description: The description of this Workflow.  # noqa: E501
        :type description: str
        :param git_repo: The git_repo of this Workflow.  # noqa: E501
        :type git_repo: str
        :param license: The license of this Workflow.  # noqa: E501
        :type license: str
        :param author: The author of this Workflow.  # noqa: E501
        :type author: str
        :param containers: The containers of this Workflow.  # noqa: E501
        :type containers: List[str]
        """
        self.swagger_types = {
            'name': str,
            'type': str,
            'description': str,
            'git_repo': str,
            'license': str,
            'author': str,
            'containers': List[str]
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'description': 'description',
            'git_repo': 'git-repo',
            'license': 'license',
            'author': 'author',
            'containers': 'containers'
        }

        self._name = name
        self._type = type
        self._description = description
        self._git_repo = git_repo
        self._license = license
        self._author = author
        self._containers = containers

    @classmethod
    def from_dict(cls, dikt) -> 'Workflow':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Workflow of this Workflow.  # noqa: E501
        :rtype: Workflow
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Workflow.

        The name of workflow  # noqa: E501

        :return: The name of this Workflow.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Workflow.

        The name of workflow  # noqa: E501

        :param name: The name of this Workflow.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self) -> str:
        """Gets the type of this Workflow.

        The type of workflow  # noqa: E501

        :return: The type of this Workflow.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Workflow.

        The type of workflow  # noqa: E501

        :param type: The type of this Workflow.
        :type type: str
        """

        self._type = type

    @property
    def description(self) -> str:
        """Gets the description of this Workflow.

        The description of workflow  # noqa: E501

        :return: The description of this Workflow.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Workflow.

        The description of workflow  # noqa: E501

        :param description: The description of this Workflow.
        :type description: str
        """

        self._description = description

    @property
    def git_repo(self) -> str:
        """Gets the git_repo of this Workflow.

        The git-repo of workflow  # noqa: E501

        :return: The git_repo of this Workflow.
        :rtype: str
        """
        return self._git_repo

    @git_repo.setter
    def git_repo(self, git_repo: str):
        """Sets the git_repo of this Workflow.

        The git-repo of workflow  # noqa: E501

        :param git_repo: The git_repo of this Workflow.
        :type git_repo: str
        """
        if git_repo is None:
            raise ValueError("Invalid value for `git_repo`, must not be `None`")  # noqa: E501

        self._git_repo = git_repo

    @property
    def license(self) -> str:
        """Gets the license of this Workflow.

        The license of workflow  # noqa: E501

        :return: The license of this Workflow.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license: str):
        """Sets the license of this Workflow.

        The license of workflow  # noqa: E501

        :param license: The license of this Workflow.
        :type license: str
        """

        self._license = license

    @property
    def author(self) -> str:
        """Gets the author of this Workflow.

        The author of workflow  # noqa: E501

        :return: The author of this Workflow.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author: str):
        """Sets the author of this Workflow.

        The author of workflow  # noqa: E501

        :param author: The author of this Workflow.
        :type author: str
        """

        self._author = author

    @property
    def containers(self) -> List[str]:
        """Gets the containers of this Workflow.

        The containers used by the workflow  # noqa: E501

        :return: The containers of this Workflow.
        :rtype: List[str]
        """
        return self._containers

    @containers.setter
    def containers(self, containers: List[str]):
        """Sets the containers of this Workflow.

        The containers used by the workflow  # noqa: E501

        :param containers: The containers of this Workflow.
        :type containers: List[str]
        """

        self._containers = containers
