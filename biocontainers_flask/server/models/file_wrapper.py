# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from biocontainers_flask.server.models.base_model_ import Model
from biocontainers_flask.server.models.checksum import Checksum  # noqa: F401,E501
from biocontainers_flask.server import util


class FileWrapper(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, content: str=None, checksum: List[Checksum]=None, url: str=None):  # noqa: E501
        """FileWrapper - a model defined in Swagger

        :param content: The content of this FileWrapper.  # noqa: E501
        :type content: str
        :param checksum: The checksum of this FileWrapper.  # noqa: E501
        :type checksum: List[Checksum]
        :param url: The url of this FileWrapper.  # noqa: E501
        :type url: str
        """
        self.swagger_types = {
            'content': str,
            'checksum': List[Checksum],
            'url': str
        }

        self.attribute_map = {
            'content': 'content',
            'checksum': 'checksum',
            'url': 'url'
        }
        self._content = content
        self._checksum = checksum
        self._url = url

    @classmethod
    def from_dict(cls, dikt) -> 'FileWrapper':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FileWrapper of this FileWrapper.  # noqa: E501
        :rtype: FileWrapper
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self) -> str:
        """Gets the content of this FileWrapper.

        The content of the file itself. One of url or content is required.  # noqa: E501

        :return: The content of this FileWrapper.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this FileWrapper.

        The content of the file itself. One of url or content is required.  # noqa: E501

        :param content: The content of this FileWrapper.
        :type content: str
        """

        self._content = content

    @property
    def checksum(self) -> List[Checksum]:
        """Gets the checksum of this FileWrapper.

        A production (immutable) tool version is required to have a hashcode. Not required otherwise, but might be useful to detect changes.   # noqa: E501

        :return: The checksum of this FileWrapper.
        :rtype: List[Checksum]
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum: List[Checksum]):
        """Sets the checksum of this FileWrapper.

        A production (immutable) tool version is required to have a hashcode. Not required otherwise, but might be useful to detect changes.   # noqa: E501

        :param checksum: The checksum of this FileWrapper.
        :type checksum: List[Checksum]
        """

        self._checksum = checksum

    @property
    def url(self) -> str:
        """Gets the url of this FileWrapper.

        Optional url to the underlying content, should include version information, and can include a git hash.  Note that this URL should resolve to the raw unwrapped content that would otherwise be available in content. One of url or content is required.  # noqa: E501

        :return: The url of this FileWrapper.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this FileWrapper.

        Optional url to the underlying content, should include version information, and can include a git hash.  Note that this URL should resolve to the raw unwrapped content that would otherwise be available in content. One of url or content is required.  # noqa: E501

        :param url: The url of this FileWrapper.
        :type url: str
        """

        self._url = url
