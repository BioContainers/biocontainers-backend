# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from biocontainers_flask.server.models.base_model_ import Model
from biocontainers_flask.server import util


class Checksum(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, checksum: str=None, type: str=None):  # noqa: E501
        """Checksum - a model defined in Swagger

        :param checksum: The checksum of this Checksum.  # noqa: E501
        :type checksum: str
        :param type: The type of this Checksum.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'checksum': str,
            'type': str
        }

        self.attribute_map = {
            'checksum': 'checksum',
            'type': 'type'
        }
        self._checksum = checksum
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'Checksum':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Checksum of this Checksum.  # noqa: E501
        :rtype: Checksum
        """
        return util.deserialize_model(dikt, cls)

    @property
    def checksum(self) -> str:
        """Gets the checksum of this Checksum.

        The hex-string encoded checksum for the data.   # noqa: E501

        :return: The checksum of this Checksum.
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum: str):
        """Sets the checksum of this Checksum.

        The hex-string encoded checksum for the data.   # noqa: E501

        :param checksum: The checksum of this Checksum.
        :type checksum: str
        """
        if checksum is None:
            raise ValueError("Invalid value for `checksum`, must not be `None`")  # noqa: E501

        self._checksum = checksum

    @property
    def type(self) -> str:
        """Gets the type of this Checksum.

        The digest method used to create the checksum. The value (e.g. `sha-256`) SHOULD be listed as `Hash Name String` in the https://github.com/ga4gh-discovery/ga4gh-checksum/blob/master/hash-alg.csv[GA4GH Checksum Hash Algorithm Registry]. Other values MAY be used, as long as implementors are aware of the issues discussed in https://tools.ietf.org/html/rfc6920#section-9.4[RFC6920]. GA4GH may provide more explicit guidance for use of non-IANA-registered algorithms in the future.  # noqa: E501

        :return: The type of this Checksum.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Checksum.

        The digest method used to create the checksum. The value (e.g. `sha-256`) SHOULD be listed as `Hash Name String` in the https://github.com/ga4gh-discovery/ga4gh-checksum/blob/master/hash-alg.csv[GA4GH Checksum Hash Algorithm Registry]. Other values MAY be used, as long as implementors are aware of the issues discussed in https://tools.ietf.org/html/rfc6920#section-9.4[RFC6920]. GA4GH may provide more explicit guidance for use of non-IANA-registered algorithms in the future.  # noqa: E501

        :param type: The type of this Checksum.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type
