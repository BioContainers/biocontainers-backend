# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from biocontainers_flask.server.models.base_model_ import Model
from biocontainers_flask.server.models.facet_value import FacetValue  # noqa: F401,E501
from biocontainers_flask.server import util


class Facet(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, facet: str=None, values: List[FacetValue]=None):  # noqa: E501
        """Facet - a model defined in Swagger

        :param facet: The facet of this Facet.  # noqa: E501
        :type facet: str
        :param values: The values of this Facet.  # noqa: E501
        :type values: List[FacetValue]
        """
        self.swagger_types = {
            'facet': str,
            'values': List[FacetValue]
        }

        self.attribute_map = {
            'facet': 'facet',
            'values': 'values'
        }
        self._facet = facet
        self._values = values

    @classmethod
    def from_dict(cls, dikt) -> 'Facet':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Facet of this Facet.  # noqa: E501
        :rtype: Facet
        """
        return util.deserialize_model(dikt, cls)

    @property
    def facet(self) -> str:
        """Gets the facet of this Facet.

        A facet property for the Tool  # noqa: E501

        :return: The facet of this Facet.
        :rtype: str
        """
        return self._facet

    @facet.setter
    def facet(self, facet: str):
        """Sets the facet of this Facet.

        A facet property for the Tool  # noqa: E501

        :param facet: The facet of this Facet.
        :type facet: str
        """
        if facet is None:
            raise ValueError("Invalid value for `facet`, must not be `None`")  # noqa: E501

        self._facet = facet

    @property
    def values(self) -> List[FacetValue]:
        """Gets the values of this Facet.


        :return: The values of this Facet.
        :rtype: List[FacetValue]
        """
        return self._values

    @values.setter
    def values(self, values: List[FacetValue]):
        """Sets the values of this Facet.


        :param values: The values of this Facet.
        :type values: List[FacetValue]
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501

        self._values = values
