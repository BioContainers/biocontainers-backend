# coding: utf-8

from __future__ import absolute_import

from biocontainers_flask.server import util
from biocontainers_flask.server.models.base_model_ import Model


class ToolFile(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, path: str=None, file_type: str=None):  # noqa: E501
        """ToolFile - a model defined in Swagger

        :param path: The path of this ToolFile.  # noqa: E501
        :type path: str
        :param file_type: The file_type of this ToolFile.  # noqa: E501
        :type file_type: str
        """
        self.swagger_types = {
            'path': str,
            'file_type': str
        }

        self.attribute_map = {
            'path': 'path',
            'file_type': 'file_type'
        }

        self._path = path
        self._file_type = file_type

    @classmethod
    def from_dict(cls, dikt) -> 'ToolFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ToolFile of this ToolFile.  # noqa: E501
        :rtype: ToolFile
        """
        return util.deserialize_model(dikt, cls)

    @property
    def path(self) -> str:
        """Gets the path of this ToolFile.

        Relative path of the file.  A descriptor's path can be used with the GA4GH .../{type}/descriptor/{relative_path} endpoint  # noqa: E501

        :return: The path of this ToolFile.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this ToolFile.

        Relative path of the file.  A descriptor's path can be used with the GA4GH .../{type}/descriptor/{relative_path} endpoint  # noqa: E501

        :param path: The path of this ToolFile.
        :type path: str
        """

        self._path = path

    @property
    def file_type(self) -> str:
        """Gets the file_type of this ToolFile.


        :return: The file_type of this ToolFile.
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type: str):
        """Sets the file_type of this ToolFile.


        :param file_type: The file_type of this ToolFile.
        :type file_type: str
        """
        allowed_values = ["TEST_FILE", "PRIMARY_DESCRIPTOR", "SECONDARY_DESCRIPTOR", "CONTAINERFILE", "OTHER"]  # noqa: E501
        if file_type not in allowed_values:
            raise ValueError(
                "Invalid value for `file_type` ({0}), must be one of {1}"
                .format(file_type, allowed_values)
            )

        self._file_type = file_type
